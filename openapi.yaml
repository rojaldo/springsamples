
openapi: 3.0.0
info:
  title: My API
  version: 1.0.0
  description: |
    This is my API.
    The endpoints are described below.
  contact:
    name: My API Support
    url: https://example.com/support
    email: sample@email.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:8080/v1/api
    description: Development server
  - url: https://api.example.com/v1/api
    description: Production server
tags:
  - name: beers
    description: Operations about beers
  - name: library
    description: Operations about library
paths:
  /beers:
    get:
      summary: Get a list of beers
      operationId: getBeers
      tags:
        - beers
      parameters:
        - name: abv_gt
          in: query
          description: Return only beers with ABV greater than the given number
          required: false
          schema:
            type: integer
            format: int32
        - name: abv_lt
          in: query
          description: Return only beers with ABV less than the given number
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: An array of beers
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: '#/components/schemas/Beers'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a beer
      operationId: createBeer
      tags:
        - beers
      responses:
        '201':
          description: The beer was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beer'
        '409':
          description: A beer with the given name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: Beer object that needs to be added to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Beer'
    put:
      summary: Update a beer
      operationId: updateBeer
      tags:
        - beers
      parameters:
        - name: beerId
          in: path
          description: ID of beer to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The beer was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beer'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: Beer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: Beer object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Beer'
    delete:
      summary: Delete beers by abv range
      operationId: deleteBeers
      tags:
        - beers
      parameters:
        - name: abv_gt
          in: query
          description: Delete only beers with ABV greater than the given number
          required: false
          schema:
            type: integer
            format: double
        - name: abv_lt
          in: query
          description: Delete only beers with ABV less than the given number
          required: false
          schema:
            type: integer
            format: double
      responses:
        '204':
          description: Beers deleted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /beers/{beerId}:
    get:
      summary: Get a beer by ID
      operationId: getBeerById
      tags:
        - beers
      parameters:
        - name: beerId
          in: path
          description: ID of beer to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beer'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: Beer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a beer by ID
      operationId: deleteBeerById
      tags:
        - beers
      parameters:
        - name: beerId
          in: path
          description: ID of beer to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Beer deleted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: Beer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /library/users:
    get:
      summary: Get all users
      operationId: getUsers
      tags:
        - library
        - users
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a user
      operationId: createUser
      tags:
        - library
        - users
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: User object that needs to be added to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
    put:
      summary: Update a user
      operationId: updateUser
      tags:
        - library
        - users
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: User object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
  /library/users/{id}:
    get:
      summary: Get a user by ID
      operationId: getUserById
      tags:
        - library
        - users
      parameters:
        - name: id
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a user by ID
      operationId: deleteUserById
      tags:
        - library
        - users
      parameters:
        - name: id
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /library/books:
    get:
      summary: Get all books
      operationId: getBooks
      tags:
        - library
        - books
      parameters:
        - name: title
          in: query
          description: Title of book to return
          required: false
          schema:
            type: string
        - name: author
          in: query
          description: Author of book to return
          required: false
          schema:
            type: string
        - name: isbn
          in: query
          description: ISBN of book to return
          required: false
          schema:
            type: string        
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Books'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a book
      operationId: createBook
      tags:
        - library
        - books
      responses:
        '201':
          description: Book created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '409':
          description: Book already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: Book object that needs to be added to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
    put:
      summary: Update a book
      operationId: updateBook
      tags:
        - library
        - books
      responses:
        '200':
          description: Book updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: Book not found
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/Error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: Book object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
  /library/books/{id}:
    get:
      summary: Get a book by ID
      operationId: getBookById
      tags:
        - library
        - books
      parameters:
        - name: id
          in: path
          description: ID of book to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a book by ID
      operationId: deleteBookById
      tags:
        - library
        - books
      parameters:
        - name: id
          in: path
          description: ID of book to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Book deleted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Beer:
      required:
        - name
        - tagline
        - first_brewed
        - description
        - image_url
        - abv
        - ibu
        - ebc
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tagline:
          type: string
        first_brewed:
          type: string
        description:
          type: string
        image_url:
          type: string
        abv:
          type: number
          format: float
        ibu:
          type: number
          format: float
        ebc:
          type: number
          format: float
    Beers:
      type: array
      items:
        $ref: '#/components/schemas/Beer'
    Error400:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Error500:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Error:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Error409:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Error404:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    User:
      required:
        - firstName
        - lastName
        - email
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'
    Book:
      required:
        - title
        - author
        - isbn
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        author:
          type: string
        isbn:
          type: string
    Books:  
      type: array
      items:
        $ref: '#/components/schemas/Book'
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    OAuth2:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://example.com/api/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
        password:
          tokenUrl: https://example.com/api/oauth/token
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
        clientCredentials:
          tokenUrl: https://example.com/api/oauth/token
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
        authorizationCode:
          authorizationUrl: https://example.com/api/oauth/dialog
          tokenUrl: https://example.com/api/oauth/token
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
      
